import { MigrationInterface, QueryRunner } from "typeorm";

export class Migrations1748366913850 implements MigrationInterface {
    name = 'Migrations1748366913850'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP CONSTRAINT "password_reset_tokens_user_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP CONSTRAINT "entry_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP CONSTRAINT "initiated_by_user_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "entries" DROP CONSTRAINT "user_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "entries" DROP CONSTRAINT "queue_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP CONSTRAINT "organization_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP CONSTRAINT "user_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "user_id_fkey"`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "queue_id_fkey"`);
        await queryRunner.query(`DROP INDEX "public"."idx_password_reset_tokens_user_token_valid"`);
        await queryRunner.query(`CREATE TABLE "password_reset_codes" ("id" SERIAL NOT NULL, "code" character varying(6) NOT NULL, "expires_at" TIMESTAMP NOT NULL, "is_valid" boolean NOT NULL DEFAULT true, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "user_id" integer NOT NULL, CONSTRAINT "UQ_f1399d5463bc09f8075a5739da1" UNIQUE ("code"), CONSTRAINT "PK_f3a88f7bc4536c53f2b277a0b56" PRIMARY KEY ("id"))`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP CONSTRAINT "organizations_pkey"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "organization_id"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "organization_id" SERIAL NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD CONSTRAINT "PK_256856c7ab20081dd27937d43ed" PRIMARY KEY ("organization_id")`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "name" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "city"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "city" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "address"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "address" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD CONSTRAINT "UQ_ab673f0e63eac966762155508ee" UNIQUE ("token")`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP COLUMN "expires_at"`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD "expires_at" TIMESTAMP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP COLUMN "created_at"`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD "created_at" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD "user_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "user_id_pkey"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "user_id" SERIAL NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "PK_96aac72f1574b88752e9fb00089" PRIMARY KEY ("user_id")`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "email_u"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "email" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "password_hash"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "password_hash" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "registration_date" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "journal" DROP CONSTRAINT "entry_log_pkey"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "log_id"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "log_id" SERIAL NOT NULL`);
        await queryRunner.query(`ALTER TABLE "journal" ADD CONSTRAINT "PK_d1896c9f522fe4bb4f7e8046273" PRIMARY KEY ("log_id")`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "entry_id"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "entry_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TYPE "public"."journal_action" RENAME TO "journal_action_old"`);
        await queryRunner.query(`CREATE TYPE "public"."journal_action_enum" AS ENUM('joined', 'left', 'removed', 'admin_removed', 'status_changed', 'started_serving', 'completed_service', 'user_canceled', 'admin_canceled', 'no_show', 'marked_late', 'admin_added')`);
        await queryRunner.query(`ALTER TABLE "journal" ALTER COLUMN "action" TYPE "public"."journal_action_enum" USING "action"::"text"::"public"."journal_action_enum"`);
        await queryRunner.query(`DROP TYPE "public"."journal_action_old"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "prev_status"`);
        await queryRunner.query(`CREATE TYPE "public"."journal_prev_status_enum" AS ENUM('waiting', 'serving', 'completed', 'canceled', 'no_show', 'late', 'removed')`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "prev_status" "public"."journal_prev_status_enum"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "new_status"`);
        await queryRunner.query(`CREATE TYPE "public"."journal_new_status_enum" AS ENUM('waiting', 'serving', 'completed', 'canceled', 'no_show', 'late', 'removed')`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "new_status" "public"."journal_new_status_enum"`);
        await queryRunner.query(`ALTER TABLE "journal" ALTER COLUMN "log_time" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "initiated_by_user_id"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "initiated_by_user_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "entries" DROP CONSTRAINT "queue_entries_pkey"`);
        await queryRunner.query(`ALTER TABLE "entries" DROP COLUMN "entry_id"`);
        await queryRunner.query(`ALTER TABLE "entries" ADD "entry_id" SERIAL NOT NULL`);
        await queryRunner.query(`ALTER TABLE "entries" ADD CONSTRAINT "PK_8ee36b5f6558cdc0fbd4af1434c" PRIMARY KEY ("entry_id")`);
        await queryRunner.query(`ALTER TABLE "entries" DROP COLUMN "queue_id"`);
        await queryRunner.query(`ALTER TABLE "entries" ADD "queue_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "entries" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "entries" ADD "user_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TYPE "public"."entry_status" RENAME TO "entry_status_old"`);
        await queryRunner.query(`CREATE TYPE "public"."entries_status_enum" AS ENUM('waiting', 'serving', 'completed', 'canceled', 'no_show', 'late')`);
        await queryRunner.query(`ALTER TABLE "entries" ALTER COLUMN "status" TYPE "public"."entries_status_enum" USING "status"::"text"::"public"."entries_status_enum"`);
        await queryRunner.query(`DROP TYPE "public"."entry_status_old"`);
        await queryRunner.query(`ALTER TABLE "entries" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "entries" ALTER COLUMN "status_updated_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "queues" DROP CONSTRAINT "queues_pkey"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "queue_id"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "queue_id" SERIAL NOT NULL`);
        await queryRunner.query(`ALTER TABLE "queues" ADD CONSTRAINT "PK_9c86e57455f479c205741ecb942" PRIMARY KEY ("queue_id")`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "organization_id"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "organization_id" integer`);
        await queryRunner.query(`ALTER TYPE "public"."queue_type" RENAME TO "queue_type_old"`);
        await queryRunner.query(`CREATE TYPE "public"."queues_type_enum" AS ENUM('organizational', 'self_organized')`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "type" TYPE "public"."queues_type_enum" USING "type"::"text"::"public"."queues_type_enum"`);
        await queryRunner.query(`DROP TYPE "public"."queue_type_old"`);
        await queryRunner.query(`ALTER TYPE "public"."queue_visibility" RENAME TO "queue_visibility_old"`);
        await queryRunner.query(`CREATE TYPE "public"."queues_visibility_enum" AS ENUM('public', 'private')`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "visibility" TYPE "public"."queues_visibility_enum" USING "visibility"::"text"::"public"."queues_visibility_enum"`);
        await queryRunner.query(`DROP TYPE "public"."queue_visibility_old"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "city"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "city" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "concurrent_visitors" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "queues" DROP CONSTRAINT "private_link_token_u"`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "created_by_user_id"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "created_by_user_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "queue_administrators_pkey"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "queue_administrators_pkey" PRIMARY KEY ("queue_id")`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD "user_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "queue_administrators_pkey"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "queue_administrators_pkey" PRIMARY KEY ("queue_id", "user_id")`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "queue_administrators_pkey"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "PK_fc23800cd060320637aa05f21f6" PRIMARY KEY ("user_id")`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP COLUMN "queue_id"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD "queue_id" integer NOT NULL`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "PK_fc23800cd060320637aa05f21f6"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "PK_f17efea4d9bc9e9720f057e4b31" PRIMARY KEY ("user_id", "queue_id")`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD CONSTRAINT "FK_52ac39dd8a28730c63aeb428c9c" FOREIGN KEY ("user_id") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "journal" ADD CONSTRAINT "FK_69167f660c807d2aa178f0bd7e6" FOREIGN KEY ("entry_id") REFERENCES "entries"("entry_id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "journal" ADD CONSTRAINT "FK_b9abbd1986df29baa00d5931ed2" FOREIGN KEY ("initiated_by_user_id") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "entries" ADD CONSTRAINT "FK_73b250bca5e5a24e1343da56168" FOREIGN KEY ("user_id") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "entries" ADD CONSTRAINT "FK_3a592d009aab03dbc5d89f32e1c" FOREIGN KEY ("queue_id") REFERENCES "queues"("queue_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "queues" ADD CONSTRAINT "FK_5044c9ae637056bdb9db3e512d8" FOREIGN KEY ("organization_id") REFERENCES "organizations"("organization_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "queues" ADD CONSTRAINT "FK_09b6a33172f829515f478156120" FOREIGN KEY ("created_by_user_id") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "FK_12ff2aff54e3fca4b036bfea20b" FOREIGN KEY ("queue_id") REFERENCES "queues"("queue_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "FK_fc23800cd060320637aa05f21f6" FOREIGN KEY ("user_id") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "password_reset_codes" ADD CONSTRAINT "FK_421ca49f5a7b180365035267ca6" FOREIGN KEY ("user_id") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "password_reset_codes" DROP CONSTRAINT "FK_421ca49f5a7b180365035267ca6"`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "FK_fc23800cd060320637aa05f21f6"`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "FK_12ff2aff54e3fca4b036bfea20b"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP CONSTRAINT "FK_09b6a33172f829515f478156120"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP CONSTRAINT "FK_5044c9ae637056bdb9db3e512d8"`);
        await queryRunner.query(`ALTER TABLE "entries" DROP CONSTRAINT "FK_3a592d009aab03dbc5d89f32e1c"`);
        await queryRunner.query(`ALTER TABLE "entries" DROP CONSTRAINT "FK_73b250bca5e5a24e1343da56168"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP CONSTRAINT "FK_b9abbd1986df29baa00d5931ed2"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP CONSTRAINT "FK_69167f660c807d2aa178f0bd7e6"`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP CONSTRAINT "FK_52ac39dd8a28730c63aeb428c9c"`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "PK_f17efea4d9bc9e9720f057e4b31"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "PK_fc23800cd060320637aa05f21f6" PRIMARY KEY ("user_id")`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP COLUMN "queue_id"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD "queue_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "PK_fc23800cd060320637aa05f21f6"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "queue_administrators_pkey" PRIMARY KEY ("queue_id", "user_id")`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "queue_administrators_pkey"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "queue_administrators_pkey" PRIMARY KEY ("queue_id")`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD "user_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "administrators" DROP CONSTRAINT "queue_administrators_pkey"`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "queue_administrators_pkey" PRIMARY KEY ("user_id", "queue_id")`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "created_by_user_id"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "created_by_user_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "created_at" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "queues" ADD CONSTRAINT "private_link_token_u" UNIQUE ("private_link_token")`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "concurrent_visitors" SET DEFAULT '1'`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "city"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "city" character varying(255) NOT NULL`);
        await queryRunner.query(`CREATE TYPE "public"."queue_visibility_old" AS ENUM('public', 'private')`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "visibility" TYPE "public"."queue_visibility_old" USING "visibility"::"text"::"public"."queue_visibility_old"`);
        await queryRunner.query(`DROP TYPE "public"."queues_visibility_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."queue_visibility_old" RENAME TO "queue_visibility"`);
        await queryRunner.query(`CREATE TYPE "public"."queue_type_old" AS ENUM('organizational', 'self_organized')`);
        await queryRunner.query(`ALTER TABLE "queues" ALTER COLUMN "type" TYPE "public"."queue_type_old" USING "type"::"text"::"public"."queue_type_old"`);
        await queryRunner.query(`DROP TYPE "public"."queues_type_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."queue_type_old" RENAME TO "queue_type"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "organization_id"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "organization_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "queues" DROP CONSTRAINT "PK_9c86e57455f479c205741ecb942"`);
        await queryRunner.query(`ALTER TABLE "queues" DROP COLUMN "queue_id"`);
        await queryRunner.query(`ALTER TABLE "queues" ADD "queue_id" bigint GENERATED ALWAYS AS IDENTITY NOT NULL`);
        await queryRunner.query(`ALTER TABLE "queues" ADD CONSTRAINT "queues_pkey" PRIMARY KEY ("queue_id")`);
        await queryRunner.query(`ALTER TABLE "entries" ALTER COLUMN "status_updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "entries" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`CREATE TYPE "public"."entry_status_old" AS ENUM('waiting', 'serving', 'completed', 'canceled', 'late')`);
        await queryRunner.query(`ALTER TABLE "entries" ALTER COLUMN "status" TYPE "public"."entry_status_old" USING "status"::"text"::"public"."entry_status_old"`);
        await queryRunner.query(`DROP TYPE "public"."entries_status_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."entry_status_old" RENAME TO "entry_status"`);
        await queryRunner.query(`ALTER TABLE "entries" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "entries" ADD "user_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "entries" DROP COLUMN "queue_id"`);
        await queryRunner.query(`ALTER TABLE "entries" ADD "queue_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "entries" DROP CONSTRAINT "PK_8ee36b5f6558cdc0fbd4af1434c"`);
        await queryRunner.query(`ALTER TABLE "entries" DROP COLUMN "entry_id"`);
        await queryRunner.query(`ALTER TABLE "entries" ADD "entry_id" bigint GENERATED ALWAYS AS IDENTITY NOT NULL`);
        await queryRunner.query(`ALTER TABLE "entries" ADD CONSTRAINT "queue_entries_pkey" PRIMARY KEY ("entry_id")`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "initiated_by_user_id"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "initiated_by_user_id" bigint`);
        await queryRunner.query(`ALTER TABLE "journal" ALTER COLUMN "log_time" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "new_status"`);
        await queryRunner.query(`DROP TYPE "public"."journal_new_status_enum"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "new_status" character varying`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "prev_status"`);
        await queryRunner.query(`DROP TYPE "public"."journal_prev_status_enum"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "prev_status" character varying`);
        await queryRunner.query(`CREATE TYPE "public"."journal_action_old" AS ENUM('joined', 'admin_added', 'started_serving', 'completed_service', 'canceled_by_user', 'canceled_by_admin', 'marked_late', 'delayed', 'notification_sent')`);
        await queryRunner.query(`ALTER TABLE "journal" ALTER COLUMN "action" TYPE "public"."journal_action_old" USING "action"::"text"::"public"."journal_action_old"`);
        await queryRunner.query(`DROP TYPE "public"."journal_action_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."journal_action_old" RENAME TO "journal_action"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "entry_id"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "entry_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "journal" DROP CONSTRAINT "PK_d1896c9f522fe4bb4f7e8046273"`);
        await queryRunner.query(`ALTER TABLE "journal" DROP COLUMN "log_id"`);
        await queryRunner.query(`ALTER TABLE "journal" ADD "log_id" bigint GENERATED ALWAYS AS IDENTITY NOT NULL`);
        await queryRunner.query(`ALTER TABLE "journal" ADD CONSTRAINT "entry_log_pkey" PRIMARY KEY ("log_id")`);
        await queryRunner.query(`ALTER TABLE "users" ALTER COLUMN "registration_date" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "password_hash"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "password_hash" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "email"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "email" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "email_u" UNIQUE ("email")`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "PK_96aac72f1574b88752e9fb00089"`);
        await queryRunner.query(`ALTER TABLE "users" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "users" ADD "user_id" bigint GENERATED ALWAYS AS IDENTITY NOT NULL`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "user_id_pkey" PRIMARY KEY ("user_id")`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD "user_id" bigint NOT NULL`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP COLUMN "created_at"`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP COLUMN "expires_at"`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD "expires_at" TIMESTAMP WITH TIME ZONE NOT NULL`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" DROP CONSTRAINT "UQ_ab673f0e63eac966762155508ee"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "address"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "address" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "city"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "city" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "name"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "name" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP CONSTRAINT "PK_256856c7ab20081dd27937d43ed"`);
        await queryRunner.query(`ALTER TABLE "organizations" DROP COLUMN "organization_id"`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD "organization_id" bigint GENERATED ALWAYS AS IDENTITY NOT NULL`);
        await queryRunner.query(`ALTER TABLE "organizations" ADD CONSTRAINT "organizations_pkey" PRIMARY KEY ("organization_id")`);
        await queryRunner.query(`DROP TABLE "password_reset_codes"`);
        await queryRunner.query(`CREATE INDEX "idx_password_reset_tokens_user_token_valid" ON "password_reset_tokens" ("user_id", "token", "is_valid") `);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "queue_id_fkey" FOREIGN KEY ("queue_id", "queue_id") REFERENCES "queues"("queue_id","queue_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "administrators" ADD CONSTRAINT "user_id_fkey" FOREIGN KEY ("user_id", "user_id", "created_by_user_id") REFERENCES "users"("user_id","user_id","user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "queues" ADD CONSTRAINT "user_id_fkey" FOREIGN KEY ("user_id", "user_id", "created_by_user_id") REFERENCES "users"("user_id","user_id","user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "queues" ADD CONSTRAINT "organization_id_fkey" FOREIGN KEY ("organization_id") REFERENCES "organizations"("organization_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "entries" ADD CONSTRAINT "queue_id_fkey" FOREIGN KEY ("queue_id", "queue_id") REFERENCES "queues"("queue_id","queue_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "entries" ADD CONSTRAINT "user_id_fkey" FOREIGN KEY ("user_id", "user_id", "created_by_user_id") REFERENCES "users"("user_id","user_id","user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "journal" ADD CONSTRAINT "initiated_by_user_id_fkey" FOREIGN KEY ("initiated_by_user_id") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "journal" ADD CONSTRAINT "entry_id_fkey" FOREIGN KEY ("entry_id") REFERENCES "entries"("entry_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "password_reset_tokens" ADD CONSTRAINT "password_reset_tokens_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("user_id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

}
